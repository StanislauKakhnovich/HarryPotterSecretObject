let levels = [
    {
        name: `level 1`,
        instructions: { 
            'ru': `<p>Приветствую вас в игре HARRY POTTER AND THE SECRET OBJECT, которая поможет вам понять объекты. Объекты 
                        используются для хранения коллекций различных значений и более сложных сущностей. В JavaScript
                        объекты используются очень часто, это одна из основ языка. Поэтому вы должны понять их, 
                        прежде чем углубляться куда-либо ещё.  
                    </p>
                    <p>Объект может быть создан с помощью фигурных скобок {…} с необязательным списком свойств. 
                        Свойство – это пара «ключ: значение», где ключ – это строка (также называемая «именем свойства»), 
                        а значение может быть чем угодно.
                    </p>
                    <p>Пустой объект можно создать, используя один из двух вариантов синтаксиса:
                        <br>
                        <code class="help">var user = new Object();</code>
                        <br>
                        <code class="help">var user = {};</code>
                    </p>
                    <p>Обычно используют вариант с фигурными скобками {...}. 
                        Такое объявление называют литералом объекта или литеральной нотацией.
                    </p>
                    <p>Гарри Поттер вырос и стал работать в Министерстве магии. Ему поручили создать подземное
                        секретное хранилище в котором будут храниться свитки с запрещенными заклинаниями. Помогите Гарри Поттеру создать 
                        хранилище свитков, которое будет нашим объектом. Объявите переменную <code class="help play">secretObject</code> и присвойте ей ссылку на пустой объект,
                        как показано в одном из примеров выше. Здесь и далее надо использовать <code class="help play">var</code> при объявлении переменных. 
                    </p>
                    <p>
                    Также, если после ввода правильного кода ничего не происходит, возможно возник баг, просто переключитесь прокрутчиком уровня, который находится над текстом.
                    </p>
                    <p>
                        После написания кода нажмите Enter.
                    </p>`,
            'en': ``
        },
        before: ``,
        after: ``
    },
    {
        name: `level 2`,
        instructions: {
            'ru': `<p>При использовании литерального синтаксиса {...} мы сразу можем поместить в объект несколько свойств в виде пар «ключ: значение»:
                    </p>
                    <p>
                    <code class="help">
                    var user = {     // объект
                    <br>
                                name: "John",  // под ключом "name" хранится значение "John"
                    <br>
                                age: 30        // под ключом "age" хранится значение 30
                    <br>
                                };
                    </code>
                    </p>
                    <p> У каждого свойства есть ключ (также называемый «имя» или «идентификатор»). После имени свойства следует двоеточие <code class="help">":"</code>, и затем указывается значение свойства. Если в объекте несколько свойств, то они перечисляются через запятую. В объекте user сейчас находятся два свойства: 
                    </p>
                    <p>
                        Первое свойство с именем "name" и значением "John".
                    <br>
                        Второе свойство с именем "age" и значением 30.
                    </p>
                    <p>
                        Можно сказать, что наш объект user – это ящик с двумя папками, подписанными «name» и «age».
                    </p>
                    <p>
                    В случае с Гарри Поттером нашим объектом будет являться подземное хранилище. Свойствами данного объекта будут являться свитки
                    с заклинаниями. Наименованиями ключей будут названия заклинаний. Значениями свойств - тексты заклинаний.
                    </p>
                    <p>
                    Из Министерства магии Гарри Поттеру прислали первых два свитка с запрещенными заклинаниями. 
                    <p>
                    Первый свиток называется: <code class="help play">lectus</code> и содержит текст: <code class="help play">'Tortor, urna hac libero, sed o'</code>. 
                    <br>
                    Второй свиток называется: <code class="help play">amet</code> и содержит текст: <code class="help play">'Ipsum sed vitae consectetur du'</code>.
                    <p>
                    Помогите Гарри Поттеру переписать эти два свитка в новые свитки в подземном хранилище (наименование свитков будет являться именем свойств, текст - значением имен). 
                    <p>
                    После написания кода нажмите Enter.
                    </p>`,
            'en': ``
            },
        before: 
`secretObject = {`,
        after: `}`
    },
    {
    name: `level 3`,
        instructions: { 
            'ru': `
            <p>
            Имя свойства может состоять из нескольких слов, но тогда оно должно быть заключено в кавычки:
            </p>
            <p>
            <code class="help"> var user = {
            <br>
                name: "John",
            <br>
                age: 30,
            <br>
                "likes birds": true  // имя свойства из нескольких слов должно быть в кавычках
            <br>
              };
            </code>
            </p>
            <p>
            Гарри Поттеру прислали свиток с названием состоящим из трех слов: <code class="help play">"cursus lacinia sed"</code>. Вот содержание этого свитка: <code class="help play">'Leo, dui habitasse velit in am'</code>.
             Помогите ему переписать этот свиток в хранилище. 
            <p>
             После написания кода нажмите Enter.
            </p>
             `,
            'en': ``
        },
        before: 
`secretObject = {
    lectus: 'Tortor, urna hac libero, sed o',
    amet: 'Ipsum sed vitae consectetur du',`,
        after: `}`
    },
    {
        name: `level 4`,
            instructions: { 
                'ru': `
                <p>
                Мы можем в любой момент добавить в наше хранилище (объект) новые свитки, удалить свитки или прочитать содержимое любого свитка.
                Для обращения к свойствам используется запись «через точку»:
                </p>
                <p>
                <code class="help"> // получаем значение свойства объекта:
                <br>
                alert(secretObject.lectus); // 'Tortor, urna hac libero, sed o'
                </code>
                </p>
                <p>
                Министерство магии запросило у Гарри Поттера прочитать содержимое свитка <code class="help play">amet</code>. Давайте выведем в <code class="help play">alert</code> содержимое свитка <code class="help play">amet</code>. 
                </p>
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before:
`secretObject = {
    lectus: 'Tortor, urna hac libero, sed o',
    amet: 'Ipsum sed vitae consectetur du',
    "cursus lacinia sed": 'Leo, dui habitasse velit in am'
}`,
            after: ``
    },
    {
        name: `level 5`,
            instructions: { 
                'ru': `
                <p>
                Как мы упоминали ранее, с помощью записи через точку мы можем добавлять новое свойство в объект:
                </p>
                <p>
                <code class="help"> var user = {}; // объявляем пустой объект
                <br>
                user.name = "Pete"; // добавляем новое свойство в объект
                <br>
                alert(user.name); // Pete
                </code>
                </p>
                <p>
                Министерство Магии прислало еще три свитка.
                </p>
                <p>
                Первый свиток называется: <code class="help play">consectetur</code> и содержит текст: <code class="help play">'Accumsan et. Sed non sed orci, nisi sed'</code>.
                <br>
                Второй свиток называется: <code class="help play">arcu</code> и содержит текст: <code class="help play">'Mattis id dictum. Justo nulla fauci'</code>.
                <br>
                Третий свиток называется: <code class="help play">augue</code> и содержит текст: <code class="help play">'Ut. Est. Dapibus in sed morbi tortor, vita'</code>.
                </p>
                <p>
                Помогите Гарри Поттеру перезаписать эти свитки в хранилище используя запись через точку.
                Напоминаем, что ссылку на объект мы ранее  записали в переменную <code class="help play">secretObject</code>. 
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: ``,
            after: ``
    },
    {
        name: `level 6`,
            instructions: { 
                'ru': `
                <p>
                Для свойств, имена которых состоят из нескольких слов, доступ к значению «через точку» не работает:
                </P>
                <p>
                <code class="help">
                // это вызовет синтаксическую ошибку
                <br>
                user.likes birds = true
                </code>
                </p>
                <p>
                JavaScript видит, что мы обращаемся к свойству user.likes, а затем идёт непонятное слово birds. В итоге синтаксическая ошибка.
                Точка требует, чтобы ключ был именован по правилам именования переменных. То есть не имел пробелов, не начинался с цифры и не содержал специальные символы, кроме $ и _. Для 
                таких случаев существует альтернативный способ доступа к свойствам через квадратные скобки. Такой способ сработает с любым именем свойства:
                </p>
                <p>
                <code class="help">
                var user = {};
                <br>
                // присваивание значения свойству
                <br>
                user["likes birds"] = true;
                <br>
                // получение значения свойства
                <br>
                alert(user["likes birds"]); // true
                <br>
                // удаление свойства
                <br>
                delete user["likes birds"];
                </code>
                </p>
                <p>
                Сейчас всё в порядке. Обратите внимание, что строка в квадратных скобках заключена в кавычки (подойдёт любой тип кавычек).
                </p>
                <p>
                Министерство магии поручило Гарри Поттеру удалить свиток под названием <code class="help play">"cursus lacinia sed"</code>. Давайте поможем удалить этот свиток из нашего хранилища <code class="help play">secretObject</code>. 
                </p>
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: ``,
            after: ``
    },
    {
        name: `level 7`,
            instructions: { 
                'ru': `
                <p>
                Квадратные скобки также позволяют обратиться к свойству, имя которого может быть результатом выражения. Например, имя свойства может храниться в переменной:
                </P>
                <p>
                <code class="help">
                var key = "likes birds";
                <br>
                // то же самое, что и user["likes birds"] = true;
                <br>
                user[key] = true;
                </code>
                </p>
                <p>
                Здесь переменная key может быть вычислена во время выполнения кода или зависеть от пользовательского ввода. После этого мы используем её для доступа к свойству. Это даёт нам большую гибкость.
                Пример:
                </p>
                <p>
                <code class="help">
                var user = {
                <br>
                name: "John",
                <br>
                age: 30
                <br>
                };
                <br>
                var key = prompt("Что вы хотите узнать о пользователе?", "name");
                <br>
                // доступ к свойству через переменную
                <br>
                alert(user[key]); // John (если ввели "name")
                </code>
                </p>
                <p>
                Запись «через точку» такого не позволяет:
                </p>
                <p>
                <code class="help">
                var user = {
                <br>
                name: "John",
                <br>
                age: 30
                <br>
                };
                <br>
                var key = "name";
                <br>
                alert(user.key); // undefined
                </code>
                </p>
                <p>
                Министерство магии прислало свиток без названия с текстом: <code class="help play">'Dictum morbi et. Aenean aenean sed vi'</code>.
                Название свитка пришло отдельно в виде значения переменной <code class="help play">nameScroll</code>. Перезапишите свиток в наш объект <code class="help play">secretObject</code>
                используя квадратные скобки и переменную <code class="help play">nameScroll</code>.
                </p>
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: `  var nameScroll = 'ornare';`,
            after: ``
    },
    {
        name: `level 8`,
            instructions: { 
                'ru': `
                <p>
                Существует специальный оператор <code class="help">"in"</code> для проверки существования свойства в объекте.
                <br>
                Синтаксис оператора:
                </p>
                <p>
                <code class="help">
                "key" in object
                </code>
                </p>
                <p>
                Пример:
                </p>
                <p>
                <code class="help">
                let user = {name: "John", age: 30};
                <br>
                <br>
                alert("age" in user); // true, user.age</code> существует
                <br>
                <code class="help">
                alert("blabla" in user); // false, user.blabla</code> не существует
                </p>
                <p>
                Обратите внимание, что слева от оператора <code class="help">in</code> должно быть имя свойства. Обычно это строка в кавычках.
                Если мы опускаем кавычки, это значит, что мы указываем переменную, в которой находится имя свойства. Например:
                </p>
                <p>
                <code class="help">
                let user = {age: 30};
                <br>
                let key = "age";
                <br>
                alert(key in user); // true</code>, имя свойства было взято из переменной <code class="help">key</code>
                </p>
                <p>
                Бюрократы из Министерства магии запутались в том, какие свитки хранятся в <code class="help play">secretObject</code>. Они отправили запрос Гарри Поттеру с просьбой узнать, есть ли в хранилище свиток под названием <code class="help play">pellentesque</code>.
                Помогите Гарри Поттеру проверить наличие данного свитка в хранилище с помощью <code class="help play">"in"</code>. Результат выведите в <code class="help play">alert</code>.
                </p>
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: ``,
            after: ``
    },
    {
        name: `level 9`,
            instructions: { 
                'ru': `
                <p>
                Для перебора всех свойств объекта используется цикл <code class="help">for..in</code>.
                <br>
                Синтаксис:
                <p>
                <code class="help">
                for (var key in object) {
                <br>
                //</code> тело цикла выполняется для каждого свойства объекта
                <br>
                <code class="help">}</code>
                </p>
                <p>
                К примеру, давайте выведем все свойства объекта <code class="help">user:</code>
                </p>
                <p>
                <code class="help">
                var user = {
                <br>
                name: "John",
                <br>
                age: 30,
                <br>
                isAdmin: true
                <br>
                };
                <br>
                for (var key in user) {
                <br>
                //</code> ключи
                <code class="help">
                alert(key);  // name, age, isAdmin
                <br>
                //</code> значения ключей
                <code class="help">
                <br>
                alert(user[key]); // John, 30, true
                <br>
                }
                </code>
                </p>
                <p>
                Обратите внимание, что все конструкции «for» позволяют нам объявлять переменную внутри цикла, как, например, <code class="help">var key здесь.
                <br>
                Кроме того, мы могли бы использовать другое имя переменной. Например, часто используется вариант <code class="help">"for (var prop in obj)".
                </P>
                <p>
                Также обратите внимание на выражение  <code class="help">alert(user[key])</code>. Переменная <code class="help">key</code> взята в квадратные скобки, так как это переменная а не конкретное имя свойства. 
                В данной ситуации запись через точку работать не будет.
                </p>
                Давайте, обратимся к нашему объекту <code class="help play">secretObject</code> и выведем в <code class="help play">console.log</code> названия наших свитков, с помощью оператора <code class="help play">for..in</code>.
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: `
for (var key in secretObject) {`,
            after: `};`
    },
    {
        name: `level 10`,
            instructions: { 
                'ru': `
                <p>
                Одним из фундаментальных отличий объектов от примитивных типов данных является то, что они хранятся и копируются «по ссылке».
                <br>
                Примитивные типы: строки, числа, логические значения – присваиваются и копируются «по значению».
                <br>
                Например:
                </p>
                <p>
                <code class="help">
                var message = "Привет!";
                <br>
                var phrase = message;
                </code>
                <p>
                В результате мы имеем две независимые переменные, каждая из которых хранит строку "Привет!".
                <br>
                Объекты ведут себя иначе.
                <br>
                Переменная хранит не сам объект, а его «адрес в памяти», другими словами «ссылку» на него.
                </p>
                <p>
                Если мы представляем объект как ящик, то переменная – это ключ к нему. Копирование переменной дублирует ключ, но не сам ящик.
                <br>
                Например:
                <p>
                <code class="help">
                var user = {name: "Иван"};
                <br>
                var admin = user; //</code> копируется ссылка
                <p>
                Теперь у нас есть две переменные, каждая из которых содержит ссылку на один и тот же объект:
                <br>
                <p>
                Сам объект хранится где-то в памяти. А в переменной <code class="help">user</code> лежит «ссылка» на эту область памяти.
                <br>
                Когда переменная объекта копируется – копируется ссылка, сам же объект не дублируется.
                </p>
                <p>
                К Гарри Поттеру приходила инспекция из Министерства магии. По результатам проверки ему вынесли предписание, 
                в целях безопасности создать ещё один вход в подземное хранилище.
                </p>
                <p>
                Давайте поможем Гарри Поттеру это сделать.
                Для этого нам надо объявить новую переменную <code class="help play">var reserveEntrance</code> и присвоить ей ссылку на <code class="help play">secretObject</code>, как показано в примере выше.
                </p>
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: ``,
            after: ``
    },
    {
        name: `level 11`,
            instructions: { 
                'ru': `
                <p>
                Как видно из картинки, теперь у нас есть две переменные (два наших входа), каждая из которых содержит ссылку на один и тот же объект (наше подземное хранилище).
                Мы можем использовать любую из переменных для доступа к хранилищу и изменения его содержимого.
                </p>
                <p>
                Из Министерства магии прислали еще три свитка.
                </p>
                <p>
                Первый свиток называется: <code class="help play">eget</code> и содержит текст: <code class="help play">'Molestie sit nec vulputate habitasse pla'</code>.
                <br>
                Второй свиток называется: <code class="help play">eleifend</code> и содержит текст: <code class="help play">'Sed dapibus quis, sit velit vestibul'</code>.
                <br>
                Третий свиток называется: <code class="help play">justo</code> и содержит текст: <code class="help play">'Integer sapien consectetur sodales int'</code>.
                </p>
                <p>
                Помогите Гарри Поттеру перезаписать эти свитки в хранилище используя второй вход <code class="help play">reserveEntrance</code>.
                </p>
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: ``,
            after: ``
    },
    {
        name: `level 12`,
            instructions: { 
                'ru': `
                <p>
                Из Министерства магии пришли тревожные вести. Волан-де-Морт узнал где находится наше секретное хранилище. 
                В любую минуту он со воими последователями может напасть на наше хранилище. Если он получит в руки свитки с секретными заклинаниями, то никто не сможет его остановить. 
                </p>
                <p>
                Помогите Гарри Поттеру создать новый пустой объект в другом месте. 
                Объявите переменную <code class="help play">reserveObject</code> и присвойте ей ссылку на пустой объект. 
                </p>
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: ``,
            after: ``
    },
    {
        name: `level 13`,
            instructions: { 
                'ru': `
                <p>
                Ранее мы говорили про то что, при копировании переменной с объектом создаётся ещё одна ссылка на тот же самый объект.
                Но что, если нам всё же нужно дублировать объект? Создать независимую копию, клон?
                Это выполнимо, но немного сложно, так как в JavaScript нет встроенного метода для этого. На самом деле, такая нужда возникает редко. В большинстве случаев нам достаточно копирования по ссылке.
                Но если мы действительно этого хотим, то нам нужно создавать новый объект и повторять структуру дублируемого объекта, перебирая его свойства и копируя их.
                Например так:
                </p>
                <p>
                <code class="help">
                var user = {
                <br>
                name: "Иван",
                <br>
                age: 30
                <br>
                };
                </p>
                <p>
                var clone = {}; //</code> новый пустой объект
                </p>
                <p>
                // скопируем все свойства <code class="help">user</code> в него
                </p>
                <p>
                <code class="help">
                for (var key in user) {
                <br>
                clone[key] = user[key];
                <br>
                }
                </code>
                </p>
                <p>
                // теперь в переменной <code class="help">clone</code> находится абсолютно независимый клон объекта
                </p>
                <p>
                <code class="help">
                clone.name = "Пётр"; //</code> изменим в нём данные
                <br>
                <code class="help">
                alert(user.name); //</code> в оригинальном объекте значение свойства <code class="help">'name'</code> осталось прежним – Иван.
                </p>
                <p>
                Помогите Гарри Поттеру скопировать свитки из старого объекта <code class="help play">secretObject</code> в новый объект <code class="help play">reserveObject</code>.
                </P>
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: `for (var key in secretObject) {`,
            after: `}`
    },
    {
        name: `level 14`,
            instructions: { 
                'ru': `
                <p>
                Операторы равенства <code class="help">==</code> и строгого равенства <code class="help">===</code> для объектов работают одинаково.
                <br>
                Два объекта равны только в том случае, если это один и тот же объект.
                <br>
                В примере ниже две переменные ссылаются на один и тот же объект, поэтому они равны друг другу:
                <p>
                <code class="help">
                var a = {};
                <br>
                var b = a; //</code> копирование по ссылке
                <br>
                <code class="help">
                alert(a == b); // true</code>, т.к. обе переменные ссылаются на один и тот же объект
                <br>
                <code class="help">
                alert(a === b); // true
                </code>
                </p>
                <p>
                В другом примере два разных объекта не равны, хотя оба пусты:
                </p>
                <p>
                <code class="help">
                var a = {};
                var b = {}; //</code> два независимых объекта
                </p>
                <p>
                <code class="help">
                alert(a == b); // false
                </code>
                </p>
                <p>
                Сравните между собой <code class="help play">reserveObject</code> и <code class="help play">secretObject</code>. Также можете сравнить <code class="help play">secretObject</code> и <code class="help play">reserveEntrance</code>. 
                Результаты сравнения выведите в <code class="help play">alert</code>.
                </P>
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: ``,
            after: ``
    },
    {
        name: `level 15`,
            instructions: { 
                'ru': `
                <p>
                Вы помогли Гарри Поттеру создать новое хранилище и перезаписать туда свитки. Теперь надо
                уничтожить старое хранилище. Чтобы стереть объект надо переменной, которая ссылается на объект 
                присвоить <code class="help">null</code>.
                <br>
                </p>
                <p>
                <code class="help">
                var obj = {};
                <br>
                obj = null;
                </code>
                </p>
                <p>
                Присвойте переменной <code class="help play">secretObject</code> значение <code class="help play">null</code>.
                </p>
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: ``,
            after: ``
    },
    {
        name: `level 16`,
            instructions: { 
                'ru': `
                <p>
                Как видно на изображении, после того как мы присвоили переменной secretObject значение null, исчез первый вход.
                Само хранилище (наш объект) не было стерто. Это произошло потому что, пока на объект ссылается хотя бы одна переменная он не будет стерт.
                Для того чтобы объект был стерт, надо всем перменным которые ссылаются на него присвоить null или перезаписать в них другое значение.
                После того, как будут стерты (перезаписаны) все ссылки на объект, "сборщик мусора" сотрет из памяти объект.
                </p>
                <p>
                Присвойте переменной <code class="help play">reserveEntrance</code> значение <code class="help play">null</code> и наблюдайте за тем, что произойдет с хранилищем.
                <p>
                После написания кода нажмите Enter.
                </p>
                `,
                'en': ``
            },
            before: ``,
            after: ``
    },
];

